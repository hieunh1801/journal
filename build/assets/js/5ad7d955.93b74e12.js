"use strict";(self.webpackChunkhieunh_1801_github_io=self.webpackChunkhieunh_1801_github_io||[]).push([[6810],{8170:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=s(5893),i=s(1151);const a={},r="T\xecm ki\u1ebfm tr\xean 1 tri\u1ec7u b\u1ea3n ghi v\u1edbi MYSQL",o={id:"technical/searching/mysql-searching/mysql-searching",title:"T\xecm ki\u1ebfm tr\xean 1 tri\u1ec7u b\u1ea3n ghi v\u1edbi MYSQL",description:"Step 1: Insert d\u1eef li\u1ec7u",source:"@site/docs/technical/searching/mysql-searching/mysql-searching.md",sourceDirName:"technical/searching/mysql-searching",slug:"/technical/searching/mysql-searching/",permalink:"/docs/technical/searching/mysql-searching/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/technical/searching/mysql-searching/mysql-searching.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"New Requests Register",permalink:"/docs/spmed/test email/231123 New Requests Register"},next:{title:"evkey",permalink:"/docs/tools/evkey"}},l={},c=[{value:"Step 1: Insert d\u1eef li\u1ec7u",id:"step-1-insert-d\u1eef-li\u1ec7u",level:2},{value:"SQL",id:"sql",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"t\xecm-ki\u1ebfm-tr\xean-1-tri\u1ec7u-b\u1ea3n-ghi-v\u1edbi-mysql",children:"T\xecm ki\u1ebfm tr\xean 1 tri\u1ec7u b\u1ea3n ghi v\u1edbi MYSQL"}),"\n",(0,t.jsx)(n.h2,{id:"step-1-insert-d\u1eef-li\u1ec7u",children:"Step 1: Insert d\u1eef li\u1ec7u"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="index.js"',children:'const knex = require("knex")({\n  client: "mysql2",\n  connection: {\n    host: "127.0.0.1",\n    port: 3306,\n    user: "root",\n    password: "root123",\n    database: "chat",\n  },\n});\n\nconst wordStr =\n  "Ephemeral, labyrinthine, serendipity, cacophony, mellifluous, ethereal, clandestine, juxtapose, indelible, verisimilitude, myriad, effervescent, mellifluous, quintessential, scintillating, mellifluous, esoteric, nebulous, peregrinate, vicissitude, idyllic, incandescent, obfuscate, ineffable, sonorous, ephemeral, eclectic, sonorous, ethereal, clandestine, serendipity, mellifluous, labyrinthine, effulgent, somnambulist, labyrinthine, evanescent, myriad, quintessential, serendipity, ethereal, perspicacious, reverie, nebulous, ineffable, verisimilitude, discombobulate, ephemeral, quixotic, mellifluous, sonorous, clandestine, vicissitude, evocative, ineffable, serendipity, mellifluous, ephemeral, labyrinthine, ethereal, peregrinate, scintillating, ineffable, serendipity, mellifluous, nebulous, esoteric, clandestine, labyrinthine.";\nconst word = wordStr.split(",")?.map((w) => w.trim());\n\nconst getRandomWord = () => {\n  return word[Math.floor(Math.random() * word.length)];\n};\nconst getRandomMessage = () => {\n  // each message that have 5 to 10 words\n  const wordCount = Math.floor(Math.random() * 5) + 5;\n  let message = "";\n  for (let i = 0; i < wordCount; i++) {\n    message += getRandomWord() + " ";\n  }\n  return message;\n};\n\nconsole.log(getRandomMessage());\n\nconst main = async () => {\n  await knex.schema.hasTable("messages").then(function (exists) {\n    if (!exists) {\n      return knex.schema.createTable("messages", function (t) {\n        t.increments("id").primary();\n        t.string("message", 500);\n        t.string("created_time", 100);\n      });\n    }\n  });\n\n  // insert 1 millions messages\n  // insert 1 million messages\n  for (let i = 0; i < 1000; i++) {\n    const tempMessages = [];\n    const totalRowPerBatch = 5000;\n    for (let j = 0; j < totalRowPerBatch; j++) {\n      const message = getRandomMessage();\n      const createdTime = new Date().toISOString();\n      tempMessages.push({ message, created_time: createdTime });\n    }\n    await knex("messages").insert(tempMessages);\n    // batch insert\n    console.log(\n      "batch insert",\n      i,\n      tempMessages.length,\n      "total inserted",\n      i * totalRowPerBatch\n    );\n  }\n};\n\nmain();\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i knex mysql2 --save\n\nnode index.js\n"})}),"\n",(0,t.jsx)(n.h2,{id:"sql",children:"SQL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT COUNT(*)\nFROM messages m\nWHERE message LIKE 'evanescent%'; -- ~2s -- without index\n\nCREATE INDEX idx_1__message USING BTREE ON chat.messages (message);\n\nSELECT COUNT(*)\nFROM messages m\nWHERE message LIKE 'evanescent%'; -- after index: 62ms\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>r});var t=s(7294);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);